// SPDX-License-Identifier: MIT

pragma solidity >=0.5.0 <=0.9.0;

abstract contract ERC_STD {
    function name() public virtual view returns (string memory);
    function symbol() public virtual view returns (string memory);

    function totalSupply() public virtual view returns (uint256);
    function balanceOf(address _owner) public virtual view returns (uint256 balance);
    function transfer(address _to, uint256 _value) public virtual returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value) public virtual returns (bool success);
    function approve(address _spender, uint256 _value) public virtual returns (bool success);
    function allowance(address _owner, address _spender) public virtual view returns (uint256 remaining);

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}

contract Ownership{
    address public contractOwner;
    address public newOwner;

    constructor() {
        contractOwner=msg.sender;
    }

    function changeOwner(address _to) public {
        require(msg.sender==contractOwner,"Your not an owner");
        newOwner=_to;
    }

    function acceptOwner() public {
        require(msg.sender==newOwner,"Your not new owner");
        contractOwner=newOwner;
        newOwner=address(0);
    }
}

contract ERC20 is ERC_STD,Ownership{
    string public _name;
    string public _symbol;
    address public _minter;
    uint256 public _totalSupply;

    mapping(address=>uint) public tokenBalances;
    mapping(address=>mapping(address=>uint)) allowed;

    constructor(address minter_) {
        _name="Ripple";
        _symbol="RPL";
        _minter=minter_;
        _totalSupply=1000;

        tokenBalances[_minter]=_totalSupply;
    }
    function name() public override view returns (string memory){
        return _name;
    }
    function symbol() public override view returns (string memory){
        return _symbol;
    }

    function totalSupply() public override view returns (uint256){
        return _totalSupply;
    }
    function balanceOf(address _owner) public override view returns (uint256 balance){
        return tokenBalances[_owner];
    }

    function transfer(address _to, uint256 _value) public override returns (bool success){
        require(tokenBalances[msg.sender]>=_value,"Your not able");
        require(_to!=address(0),"your an hacker");
        require(_value!=0,"Plz give the ammount");
        tokenBalances[msg.sender]-=_value;
        tokenBalances[_to]+=_value;
        emit Transfer(msg.sender,_to,_value);
        return true;
    }
    function transferFrom(address _from, address _to, uint256 _value) public override returns (bool success){
        require(_from!=address(0),"your an hacker");
        require(_to!=address(0),"your an hacker");
        require(_value!=0,"Plz give the ammount");
        uint all=allowed[_from][msg.sender];
        require(all>=_value,"Your not have sufficient Balance");
        tokenBalances[_from]-=_value;
        tokenBalances[_to]+=_value;
        emit Transfer(_from,_to,_value);

        return true;
    }
    function approve(address _spender, uint256 _value) public override returns (bool success){
        require(_spender!=address(0),"your an hacker");
        require(_value!=0,"Plz give the ammount");
        allowed[msg.sender][_spender]=_value;
        emit Approval(msg.sender,_spender,_value);
        return true;
    }
    function allowance(address _owner, address _spender) public override view returns (uint256 remaining){
        return allowed[_owner][_spender];
    }



}


